//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace EPAGriffinAPI.payamak {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ActionsSoap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BaseBL))]
    public partial class Actions : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetBranchsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddBranchOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddNumberOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveBranchOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBulkCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddBulkOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddBulk2OperationCompleted;
        
        private System.Threading.SendOrPostCallback AddNewBulkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBulkReceptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateBulkDeliveryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMessagesReceptionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveBulkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBulkStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTotalSentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTodaySentOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMultipleSMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMultipleSMS2OperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBulkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSendBulkOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMobileCountOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Actions() {
            this.Url = global::EPAGriffinAPI.Properties.Settings.Default.EPAGriffinAPI_payamak_Actions;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetBranchsCompletedEventHandler GetBranchsCompleted;
        
        /// <remarks/>
        public event AddBranchCompletedEventHandler AddBranchCompleted;
        
        /// <remarks/>
        public event AddNumberCompletedEventHandler AddNumberCompleted;
        
        /// <remarks/>
        public event RemoveBranchCompletedEventHandler RemoveBranchCompleted;
        
        /// <remarks/>
        public event GetBulkCountCompletedEventHandler GetBulkCountCompleted;
        
        /// <remarks/>
        public event AddBulkCompletedEventHandler AddBulkCompleted;
        
        /// <remarks/>
        public event AddBulk2CompletedEventHandler AddBulk2Completed;
        
        /// <remarks/>
        public event AddNewBulkCompletedEventHandler AddNewBulkCompleted;
        
        /// <remarks/>
        public event GetBulkReceptionsCompletedEventHandler GetBulkReceptionsCompleted;
        
        /// <remarks/>
        public event UpdateBulkDeliveryCompletedEventHandler UpdateBulkDeliveryCompleted;
        
        /// <remarks/>
        public event GetMessagesReceptionsCompletedEventHandler GetMessagesReceptionsCompleted;
        
        /// <remarks/>
        public event RemoveBulkCompletedEventHandler RemoveBulkCompleted;
        
        /// <remarks/>
        public event GetBulkStatusCompletedEventHandler GetBulkStatusCompleted;
        
        /// <remarks/>
        public event GetTotalSentCompletedEventHandler GetTotalSentCompleted;
        
        /// <remarks/>
        public event GetTodaySentCompletedEventHandler GetTodaySentCompleted;
        
        /// <remarks/>
        public event SendMultipleSMSCompletedEventHandler SendMultipleSMSCompleted;
        
        /// <remarks/>
        public event SendMultipleSMS2CompletedEventHandler SendMultipleSMS2Completed;
        
        /// <remarks/>
        public event GetBulkCompletedEventHandler GetBulkCompleted;
        
        /// <remarks/>
        public event GetSendBulkCompletedEventHandler GetSendBulkCompleted;
        
        /// <remarks/>
        public event GetMobileCountCompletedEventHandler GetMobileCountCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBranchs", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Branchs[] GetBranchs(string username, string password, int owner) {
            object[] results = this.Invoke("GetBranchs", new object[] {
                        username,
                        password,
                        owner});
            return ((Branchs[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBranchsAsync(string username, string password, int owner) {
            this.GetBranchsAsync(username, password, owner, null);
        }
        
        /// <remarks/>
        public void GetBranchsAsync(string username, string password, int owner, object userState) {
            if ((this.GetBranchsOperationCompleted == null)) {
                this.GetBranchsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBranchsOperationCompleted);
            }
            this.InvokeAsync("GetBranchs", new object[] {
                        username,
                        password,
                        owner}, this.GetBranchsOperationCompleted, userState);
        }
        
        private void OnGetBranchsOperationCompleted(object arg) {
            if ((this.GetBranchsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBranchsCompleted(this, new GetBranchsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddBranch", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddBranch(string username, string password, string branchName, int owner) {
            object[] results = this.Invoke("AddBranch", new object[] {
                        username,
                        password,
                        branchName,
                        owner});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddBranchAsync(string username, string password, string branchName, int owner) {
            this.AddBranchAsync(username, password, branchName, owner, null);
        }
        
        /// <remarks/>
        public void AddBranchAsync(string username, string password, string branchName, int owner, object userState) {
            if ((this.AddBranchOperationCompleted == null)) {
                this.AddBranchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddBranchOperationCompleted);
            }
            this.InvokeAsync("AddBranch", new object[] {
                        username,
                        password,
                        branchName,
                        owner}, this.AddBranchOperationCompleted, userState);
        }
        
        private void OnAddBranchOperationCompleted(object arg) {
            if ((this.AddBranchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddBranchCompleted(this, new AddBranchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNumber", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddNumber(string username, string password, int branchId, string[] mobileNumbers) {
            object[] results = this.Invoke("AddNumber", new object[] {
                        username,
                        password,
                        branchId,
                        mobileNumbers});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddNumberAsync(string username, string password, int branchId, string[] mobileNumbers) {
            this.AddNumberAsync(username, password, branchId, mobileNumbers, null);
        }
        
        /// <remarks/>
        public void AddNumberAsync(string username, string password, int branchId, string[] mobileNumbers, object userState) {
            if ((this.AddNumberOperationCompleted == null)) {
                this.AddNumberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNumberOperationCompleted);
            }
            this.InvokeAsync("AddNumber", new object[] {
                        username,
                        password,
                        branchId,
                        mobileNumbers}, this.AddNumberOperationCompleted, userState);
        }
        
        private void OnAddNumberOperationCompleted(object arg) {
            if ((this.AddNumberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNumberCompleted(this, new AddNumberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveBranch", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RemoveBranch(string username, string password, int branchId) {
            object[] results = this.Invoke("RemoveBranch", new object[] {
                        username,
                        password,
                        branchId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveBranchAsync(string username, string password, int branchId) {
            this.RemoveBranchAsync(username, password, branchId, null);
        }
        
        /// <remarks/>
        public void RemoveBranchAsync(string username, string password, int branchId, object userState) {
            if ((this.RemoveBranchOperationCompleted == null)) {
                this.RemoveBranchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveBranchOperationCompleted);
            }
            this.InvokeAsync("RemoveBranch", new object[] {
                        username,
                        password,
                        branchId}, this.RemoveBranchOperationCompleted, userState);
        }
        
        private void OnRemoveBranchOperationCompleted(object arg) {
            if ((this.RemoveBranchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveBranchCompleted(this, new RemoveBranchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBulkCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetBulkCount(string username, string password, int branch, string rangeFrom, string rangeTo) {
            object[] results = this.Invoke("GetBulkCount", new object[] {
                        username,
                        password,
                        branch,
                        rangeFrom,
                        rangeTo});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBulkCountAsync(string username, string password, int branch, string rangeFrom, string rangeTo) {
            this.GetBulkCountAsync(username, password, branch, rangeFrom, rangeTo, null);
        }
        
        /// <remarks/>
        public void GetBulkCountAsync(string username, string password, int branch, string rangeFrom, string rangeTo, object userState) {
            if ((this.GetBulkCountOperationCompleted == null)) {
                this.GetBulkCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBulkCountOperationCompleted);
            }
            this.InvokeAsync("GetBulkCount", new object[] {
                        username,
                        password,
                        branch,
                        rangeFrom,
                        rangeTo}, this.GetBulkCountOperationCompleted, userState);
        }
        
        private void OnGetBulkCountOperationCompleted(object arg) {
            if ((this.GetBulkCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBulkCountCompleted(this, new GetBulkCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddBulk", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddBulk(string username, string password, string from, int branch, byte bulkType, string title, string message, string rangeFrom, string rangeTo, System.DateTime DateToSend, int requestCount, int rowFrom) {
            object[] results = this.Invoke("AddBulk", new object[] {
                        username,
                        password,
                        from,
                        branch,
                        bulkType,
                        title,
                        message,
                        rangeFrom,
                        rangeTo,
                        DateToSend,
                        requestCount,
                        rowFrom});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddBulkAsync(string username, string password, string from, int branch, byte bulkType, string title, string message, string rangeFrom, string rangeTo, System.DateTime DateToSend, int requestCount, int rowFrom) {
            this.AddBulkAsync(username, password, from, branch, bulkType, title, message, rangeFrom, rangeTo, DateToSend, requestCount, rowFrom, null);
        }
        
        /// <remarks/>
        public void AddBulkAsync(string username, string password, string from, int branch, byte bulkType, string title, string message, string rangeFrom, string rangeTo, System.DateTime DateToSend, int requestCount, int rowFrom, object userState) {
            if ((this.AddBulkOperationCompleted == null)) {
                this.AddBulkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddBulkOperationCompleted);
            }
            this.InvokeAsync("AddBulk", new object[] {
                        username,
                        password,
                        from,
                        branch,
                        bulkType,
                        title,
                        message,
                        rangeFrom,
                        rangeTo,
                        DateToSend,
                        requestCount,
                        rowFrom}, this.AddBulkOperationCompleted, userState);
        }
        
        private void OnAddBulkOperationCompleted(object arg) {
            if ((this.AddBulkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddBulkCompleted(this, new AddBulkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddBulk2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddBulk2(string username, string password, string from, int branch, byte bulkType, string title, string message, string rangeFrom, string rangeTo, string DateToSend, int requestCount, int rowFrom) {
            object[] results = this.Invoke("AddBulk2", new object[] {
                        username,
                        password,
                        from,
                        branch,
                        bulkType,
                        title,
                        message,
                        rangeFrom,
                        rangeTo,
                        DateToSend,
                        requestCount,
                        rowFrom});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddBulk2Async(string username, string password, string from, int branch, byte bulkType, string title, string message, string rangeFrom, string rangeTo, string DateToSend, int requestCount, int rowFrom) {
            this.AddBulk2Async(username, password, from, branch, bulkType, title, message, rangeFrom, rangeTo, DateToSend, requestCount, rowFrom, null);
        }
        
        /// <remarks/>
        public void AddBulk2Async(string username, string password, string from, int branch, byte bulkType, string title, string message, string rangeFrom, string rangeTo, string DateToSend, int requestCount, int rowFrom, object userState) {
            if ((this.AddBulk2OperationCompleted == null)) {
                this.AddBulk2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddBulk2OperationCompleted);
            }
            this.InvokeAsync("AddBulk2", new object[] {
                        username,
                        password,
                        from,
                        branch,
                        bulkType,
                        title,
                        message,
                        rangeFrom,
                        rangeTo,
                        DateToSend,
                        requestCount,
                        rowFrom}, this.AddBulk2OperationCompleted, userState);
        }
        
        private void OnAddBulk2OperationCompleted(object arg) {
            if ((this.AddBulk2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddBulk2Completed(this, new AddBulk2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddNewBulk", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddNewBulk(string username, string password, string from, int branch, byte bulkType, string title, string message, string rangeFrom, string rangeTo, System.DateTime DateToSend, int requestCount, int rowFrom) {
            object[] results = this.Invoke("AddNewBulk", new object[] {
                        username,
                        password,
                        from,
                        branch,
                        bulkType,
                        title,
                        message,
                        rangeFrom,
                        rangeTo,
                        DateToSend,
                        requestCount,
                        rowFrom});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddNewBulkAsync(string username, string password, string from, int branch, byte bulkType, string title, string message, string rangeFrom, string rangeTo, System.DateTime DateToSend, int requestCount, int rowFrom) {
            this.AddNewBulkAsync(username, password, from, branch, bulkType, title, message, rangeFrom, rangeTo, DateToSend, requestCount, rowFrom, null);
        }
        
        /// <remarks/>
        public void AddNewBulkAsync(string username, string password, string from, int branch, byte bulkType, string title, string message, string rangeFrom, string rangeTo, System.DateTime DateToSend, int requestCount, int rowFrom, object userState) {
            if ((this.AddNewBulkOperationCompleted == null)) {
                this.AddNewBulkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNewBulkOperationCompleted);
            }
            this.InvokeAsync("AddNewBulk", new object[] {
                        username,
                        password,
                        from,
                        branch,
                        bulkType,
                        title,
                        message,
                        rangeFrom,
                        rangeTo,
                        DateToSend,
                        requestCount,
                        rowFrom}, this.AddNewBulkOperationCompleted, userState);
        }
        
        private void OnAddNewBulkOperationCompleted(object arg) {
            if ((this.AddNewBulkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNewBulkCompleted(this, new AddNewBulkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBulkReceptions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BulkReceptions[] GetBulkReceptions(string username, string password, int bulkId, int fromRows) {
            object[] results = this.Invoke("GetBulkReceptions", new object[] {
                        username,
                        password,
                        bulkId,
                        fromRows});
            return ((BulkReceptions[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBulkReceptionsAsync(string username, string password, int bulkId, int fromRows) {
            this.GetBulkReceptionsAsync(username, password, bulkId, fromRows, null);
        }
        
        /// <remarks/>
        public void GetBulkReceptionsAsync(string username, string password, int bulkId, int fromRows, object userState) {
            if ((this.GetBulkReceptionsOperationCompleted == null)) {
                this.GetBulkReceptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBulkReceptionsOperationCompleted);
            }
            this.InvokeAsync("GetBulkReceptions", new object[] {
                        username,
                        password,
                        bulkId,
                        fromRows}, this.GetBulkReceptionsOperationCompleted, userState);
        }
        
        private void OnGetBulkReceptionsOperationCompleted(object arg) {
            if ((this.GetBulkReceptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBulkReceptionsCompleted(this, new GetBulkReceptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBulkDelivery", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateBulkDelivery(string username, string password, int bulkId) {
            object[] results = this.Invoke("UpdateBulkDelivery", new object[] {
                        username,
                        password,
                        bulkId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateBulkDeliveryAsync(string username, string password, int bulkId) {
            this.UpdateBulkDeliveryAsync(username, password, bulkId, null);
        }
        
        /// <remarks/>
        public void UpdateBulkDeliveryAsync(string username, string password, int bulkId, object userState) {
            if ((this.UpdateBulkDeliveryOperationCompleted == null)) {
                this.UpdateBulkDeliveryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBulkDeliveryOperationCompleted);
            }
            this.InvokeAsync("UpdateBulkDelivery", new object[] {
                        username,
                        password,
                        bulkId}, this.UpdateBulkDeliveryOperationCompleted, userState);
        }
        
        private void OnUpdateBulkDeliveryOperationCompleted(object arg) {
            if ((this.UpdateBulkDeliveryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBulkDeliveryCompleted(this, new UpdateBulkDeliveryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMessagesReceptions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MsgReceptions[] GetMessagesReceptions(string username, string password, long msgId, int fromRows) {
            object[] results = this.Invoke("GetMessagesReceptions", new object[] {
                        username,
                        password,
                        msgId,
                        fromRows});
            return ((MsgReceptions[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMessagesReceptionsAsync(string username, string password, long msgId, int fromRows) {
            this.GetMessagesReceptionsAsync(username, password, msgId, fromRows, null);
        }
        
        /// <remarks/>
        public void GetMessagesReceptionsAsync(string username, string password, long msgId, int fromRows, object userState) {
            if ((this.GetMessagesReceptionsOperationCompleted == null)) {
                this.GetMessagesReceptionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMessagesReceptionsOperationCompleted);
            }
            this.InvokeAsync("GetMessagesReceptions", new object[] {
                        username,
                        password,
                        msgId,
                        fromRows}, this.GetMessagesReceptionsOperationCompleted, userState);
        }
        
        private void OnGetMessagesReceptionsOperationCompleted(object arg) {
            if ((this.GetMessagesReceptionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMessagesReceptionsCompleted(this, new GetMessagesReceptionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveBulk", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RemoveBulk(string username, string password, int bulkId) {
            object[] results = this.Invoke("RemoveBulk", new object[] {
                        username,
                        password,
                        bulkId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveBulkAsync(string username, string password, int bulkId) {
            this.RemoveBulkAsync(username, password, bulkId, null);
        }
        
        /// <remarks/>
        public void RemoveBulkAsync(string username, string password, int bulkId, object userState) {
            if ((this.RemoveBulkOperationCompleted == null)) {
                this.RemoveBulkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveBulkOperationCompleted);
            }
            this.InvokeAsync("RemoveBulk", new object[] {
                        username,
                        password,
                        bulkId}, this.RemoveBulkOperationCompleted, userState);
        }
        
        private void OnRemoveBulkOperationCompleted(object arg) {
            if ((this.RemoveBulkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveBulkCompleted(this, new RemoveBulkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBulkStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetBulkStatus(string username, string password, int bulkId, ref int sent, ref int failed, ref byte status) {
            object[] results = this.Invoke("GetBulkStatus", new object[] {
                        username,
                        password,
                        bulkId,
                        sent,
                        failed,
                        status});
            sent = ((int)(results[1]));
            failed = ((int)(results[2]));
            status = ((byte)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetBulkStatusAsync(string username, string password, int bulkId, int sent, int failed, byte status) {
            this.GetBulkStatusAsync(username, password, bulkId, sent, failed, status, null);
        }
        
        /// <remarks/>
        public void GetBulkStatusAsync(string username, string password, int bulkId, int sent, int failed, byte status, object userState) {
            if ((this.GetBulkStatusOperationCompleted == null)) {
                this.GetBulkStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBulkStatusOperationCompleted);
            }
            this.InvokeAsync("GetBulkStatus", new object[] {
                        username,
                        password,
                        bulkId,
                        sent,
                        failed,
                        status}, this.GetBulkStatusOperationCompleted, userState);
        }
        
        private void OnGetBulkStatusOperationCompleted(object arg) {
            if ((this.GetBulkStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBulkStatusCompleted(this, new GetBulkStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTotalSent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetTotalSent(string username, string password) {
            object[] results = this.Invoke("GetTotalSent", new object[] {
                        username,
                        password});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetTotalSentAsync(string username, string password) {
            this.GetTotalSentAsync(username, password, null);
        }
        
        /// <remarks/>
        public void GetTotalSentAsync(string username, string password, object userState) {
            if ((this.GetTotalSentOperationCompleted == null)) {
                this.GetTotalSentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTotalSentOperationCompleted);
            }
            this.InvokeAsync("GetTotalSent", new object[] {
                        username,
                        password}, this.GetTotalSentOperationCompleted, userState);
        }
        
        private void OnGetTotalSentOperationCompleted(object arg) {
            if ((this.GetTotalSentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTotalSentCompleted(this, new GetTotalSentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTodaySent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetTodaySent(string username, string password) {
            object[] results = this.Invoke("GetTodaySent", new object[] {
                        username,
                        password});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetTodaySentAsync(string username, string password) {
            this.GetTodaySentAsync(username, password, null);
        }
        
        /// <remarks/>
        public void GetTodaySentAsync(string username, string password, object userState) {
            if ((this.GetTodaySentOperationCompleted == null)) {
                this.GetTodaySentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTodaySentOperationCompleted);
            }
            this.InvokeAsync("GetTodaySent", new object[] {
                        username,
                        password}, this.GetTodaySentOperationCompleted, userState);
        }
        
        private void OnGetTodaySentOperationCompleted(object arg) {
            if ((this.GetTodaySentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTodaySentCompleted(this, new GetTodaySentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMultipleSMS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] SendMultipleSMS(string username, string password, string[] to, string from, string[] text, bool isflash, string udh, ref long[] recId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] ref byte[] status) {
            object[] results = this.Invoke("SendMultipleSMS", new object[] {
                        username,
                        password,
                        to,
                        from,
                        text,
                        isflash,
                        udh,
                        recId,
                        status});
            recId = ((long[])(results[1]));
            status = ((byte[])(results[2]));
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMultipleSMSAsync(string username, string password, string[] to, string from, string[] text, bool isflash, string udh, long[] recId, byte[] status) {
            this.SendMultipleSMSAsync(username, password, to, from, text, isflash, udh, recId, status, null);
        }
        
        /// <remarks/>
        public void SendMultipleSMSAsync(string username, string password, string[] to, string from, string[] text, bool isflash, string udh, long[] recId, byte[] status, object userState) {
            if ((this.SendMultipleSMSOperationCompleted == null)) {
                this.SendMultipleSMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMultipleSMSOperationCompleted);
            }
            this.InvokeAsync("SendMultipleSMS", new object[] {
                        username,
                        password,
                        to,
                        from,
                        text,
                        isflash,
                        udh,
                        recId,
                        status}, this.SendMultipleSMSOperationCompleted, userState);
        }
        
        private void OnSendMultipleSMSOperationCompleted(object arg) {
            if ((this.SendMultipleSMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMultipleSMSCompleted(this, new SendMultipleSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMultipleSMS2", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] SendMultipleSMS2(string username, string password, string[] to, string[] from, string[] text, bool isflash, string udh, ref long[] recId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] ref byte[] status) {
            object[] results = this.Invoke("SendMultipleSMS2", new object[] {
                        username,
                        password,
                        to,
                        from,
                        text,
                        isflash,
                        udh,
                        recId,
                        status});
            recId = ((long[])(results[1]));
            status = ((byte[])(results[2]));
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void SendMultipleSMS2Async(string username, string password, string[] to, string[] from, string[] text, bool isflash, string udh, long[] recId, byte[] status) {
            this.SendMultipleSMS2Async(username, password, to, from, text, isflash, udh, recId, status, null);
        }
        
        /// <remarks/>
        public void SendMultipleSMS2Async(string username, string password, string[] to, string[] from, string[] text, bool isflash, string udh, long[] recId, byte[] status, object userState) {
            if ((this.SendMultipleSMS2OperationCompleted == null)) {
                this.SendMultipleSMS2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMultipleSMS2OperationCompleted);
            }
            this.InvokeAsync("SendMultipleSMS2", new object[] {
                        username,
                        password,
                        to,
                        from,
                        text,
                        isflash,
                        udh,
                        recId,
                        status}, this.SendMultipleSMS2OperationCompleted, userState);
        }
        
        private void OnSendMultipleSMS2OperationCompleted(object arg) {
            if ((this.SendMultipleSMS2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMultipleSMS2Completed(this, new SendMultipleSMS2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBulk", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BulkGridList[] GetBulk(string username, string password) {
            object[] results = this.Invoke("GetBulk", new object[] {
                        username,
                        password});
            return ((BulkGridList[])(results[0]));
        }
        
        /// <remarks/>
        public void GetBulkAsync(string username, string password) {
            this.GetBulkAsync(username, password, null);
        }
        
        /// <remarks/>
        public void GetBulkAsync(string username, string password, object userState) {
            if ((this.GetBulkOperationCompleted == null)) {
                this.GetBulkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBulkOperationCompleted);
            }
            this.InvokeAsync("GetBulk", new object[] {
                        username,
                        password}, this.GetBulkOperationCompleted, userState);
        }
        
        private void OnGetBulkOperationCompleted(object arg) {
            if ((this.GetBulkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBulkCompleted(this, new GetBulkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSendBulk", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public BulkGridList[] GetSendBulk(string username, string password) {
            object[] results = this.Invoke("GetSendBulk", new object[] {
                        username,
                        password});
            return ((BulkGridList[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSendBulkAsync(string username, string password) {
            this.GetSendBulkAsync(username, password, null);
        }
        
        /// <remarks/>
        public void GetSendBulkAsync(string username, string password, object userState) {
            if ((this.GetSendBulkOperationCompleted == null)) {
                this.GetSendBulkOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSendBulkOperationCompleted);
            }
            this.InvokeAsync("GetSendBulk", new object[] {
                        username,
                        password}, this.GetSendBulkOperationCompleted, userState);
        }
        
        private void OnGetSendBulkOperationCompleted(object arg) {
            if ((this.GetSendBulkCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSendBulkCompleted(this, new GetSendBulkCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMobileCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetMobileCount(string username, string password, int branch, string rangeFrom, string rangeTo) {
            object[] results = this.Invoke("GetMobileCount", new object[] {
                        username,
                        password,
                        branch,
                        rangeFrom,
                        rangeTo});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetMobileCountAsync(string username, string password, int branch, string rangeFrom, string rangeTo) {
            this.GetMobileCountAsync(username, password, branch, rangeFrom, rangeTo, null);
        }
        
        /// <remarks/>
        public void GetMobileCountAsync(string username, string password, int branch, string rangeFrom, string rangeTo, object userState) {
            if ((this.GetMobileCountOperationCompleted == null)) {
                this.GetMobileCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMobileCountOperationCompleted);
            }
            this.InvokeAsync("GetMobileCount", new object[] {
                        username,
                        password,
                        branch,
                        rangeFrom,
                        rangeTo}, this.GetMobileCountOperationCompleted, userState);
        }
        
        private void OnGetMobileCountOperationCompleted(object arg) {
            if ((this.GetMobileCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMobileCountCompleted(this, new GetMobileCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Branchs {
        
        private int branchIDField;
        
        private int numberCountField;
        
        private int branchOwnerField;
        
        private string branchNameField;
        
        /// <remarks/>
        public int BranchID {
            get {
                return this.branchIDField;
            }
            set {
                this.branchIDField = value;
            }
        }
        
        /// <remarks/>
        public int NumberCount {
            get {
                return this.numberCountField;
            }
            set {
                this.numberCountField = value;
            }
        }
        
        /// <remarks/>
        public int BranchOwner {
            get {
                return this.branchOwnerField;
            }
            set {
                this.branchOwnerField = value;
            }
        }
        
        /// <remarks/>
        public string BranchName {
            get {
                return this.branchNameField;
            }
            set {
                this.branchNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BulksBL))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BulkGridList))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class BaseBL {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BulkGridList))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class BulksBL : BaseBL {
        
        private int bulkIDField;
        
        private int userIDField;
        
        private double tariffField;
        
        private int branchIDField;
        
        private System.Nullable<System.Guid> batchIDField;
        
        private byte bulkTypeField;
        
        private byte sendTypeField;
        
        private string titleField;
        
        private string bodyField;
        
        private int bodyPartsField;
        
        private int senderField;
        
        private string rangeFromField;
        
        private string rangeToField;
        
        private int rowFromField;
        
        private byte numberRuleField;
        
        private string numberTextField;
        
        private System.DateTime scheduleDateField;
        
        private System.Nullable<System.DateTime> sentDateField;
        
        private int requestCountField;
        
        private int sentCountField;
        
        private int failedCountField;
        
        private byte periodField;
        
        private byte sendStatusField;
        
        private string descriptionsField;
        
        private string errorLogField;
        
        private byte bulkStatusField;
        
        private double creditField;
        
        private bool isMoneyBackField;
        
        private int moneyBackCountField;
        
        private int moneyBackLevelField;
        
        private string gIDField;
        
        private string cGIDField;
        
        private string fromGIDField;
        
        private bool notBlackListField;
        
        private bool notifySMSField;
        
        private string mobileNumberNotifyField;
        
        /// <remarks/>
        public int BulkID {
            get {
                return this.bulkIDField;
            }
            set {
                this.bulkIDField = value;
            }
        }
        
        /// <remarks/>
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
            }
        }
        
        /// <remarks/>
        public double Tariff {
            get {
                return this.tariffField;
            }
            set {
                this.tariffField = value;
            }
        }
        
        /// <remarks/>
        public int BranchID {
            get {
                return this.branchIDField;
            }
            set {
                this.branchIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.Guid> BatchID {
            get {
                return this.batchIDField;
            }
            set {
                this.batchIDField = value;
            }
        }
        
        /// <remarks/>
        public byte BulkType {
            get {
                return this.bulkTypeField;
            }
            set {
                this.bulkTypeField = value;
            }
        }
        
        /// <remarks/>
        public byte SendType {
            get {
                return this.sendTypeField;
            }
            set {
                this.sendTypeField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string Body {
            get {
                return this.bodyField;
            }
            set {
                this.bodyField = value;
            }
        }
        
        /// <remarks/>
        public int BodyParts {
            get {
                return this.bodyPartsField;
            }
            set {
                this.bodyPartsField = value;
            }
        }
        
        /// <remarks/>
        public int Sender {
            get {
                return this.senderField;
            }
            set {
                this.senderField = value;
            }
        }
        
        /// <remarks/>
        public string RangeFrom {
            get {
                return this.rangeFromField;
            }
            set {
                this.rangeFromField = value;
            }
        }
        
        /// <remarks/>
        public string RangeTo {
            get {
                return this.rangeToField;
            }
            set {
                this.rangeToField = value;
            }
        }
        
        /// <remarks/>
        public int RowFrom {
            get {
                return this.rowFromField;
            }
            set {
                this.rowFromField = value;
            }
        }
        
        /// <remarks/>
        public byte NumberRule {
            get {
                return this.numberRuleField;
            }
            set {
                this.numberRuleField = value;
            }
        }
        
        /// <remarks/>
        public string NumberText {
            get {
                return this.numberTextField;
            }
            set {
                this.numberTextField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ScheduleDate {
            get {
                return this.scheduleDateField;
            }
            set {
                this.scheduleDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<System.DateTime> SentDate {
            get {
                return this.sentDateField;
            }
            set {
                this.sentDateField = value;
            }
        }
        
        /// <remarks/>
        public int RequestCount {
            get {
                return this.requestCountField;
            }
            set {
                this.requestCountField = value;
            }
        }
        
        /// <remarks/>
        public int SentCount {
            get {
                return this.sentCountField;
            }
            set {
                this.sentCountField = value;
            }
        }
        
        /// <remarks/>
        public int FailedCount {
            get {
                return this.failedCountField;
            }
            set {
                this.failedCountField = value;
            }
        }
        
        /// <remarks/>
        public byte Period {
            get {
                return this.periodField;
            }
            set {
                this.periodField = value;
            }
        }
        
        /// <remarks/>
        public byte SendStatus {
            get {
                return this.sendStatusField;
            }
            set {
                this.sendStatusField = value;
            }
        }
        
        /// <remarks/>
        public string Descriptions {
            get {
                return this.descriptionsField;
            }
            set {
                this.descriptionsField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorLog {
            get {
                return this.errorLogField;
            }
            set {
                this.errorLogField = value;
            }
        }
        
        /// <remarks/>
        public byte BulkStatus {
            get {
                return this.bulkStatusField;
            }
            set {
                this.bulkStatusField = value;
            }
        }
        
        /// <remarks/>
        public double Credit {
            get {
                return this.creditField;
            }
            set {
                this.creditField = value;
            }
        }
        
        /// <remarks/>
        public bool IsMoneyBack {
            get {
                return this.isMoneyBackField;
            }
            set {
                this.isMoneyBackField = value;
            }
        }
        
        /// <remarks/>
        public int MoneyBackCount {
            get {
                return this.moneyBackCountField;
            }
            set {
                this.moneyBackCountField = value;
            }
        }
        
        /// <remarks/>
        public int MoneyBackLevel {
            get {
                return this.moneyBackLevelField;
            }
            set {
                this.moneyBackLevelField = value;
            }
        }
        
        /// <remarks/>
        public string GID {
            get {
                return this.gIDField;
            }
            set {
                this.gIDField = value;
            }
        }
        
        /// <remarks/>
        public string CGID {
            get {
                return this.cGIDField;
            }
            set {
                this.cGIDField = value;
            }
        }
        
        /// <remarks/>
        public string FromGID {
            get {
                return this.fromGIDField;
            }
            set {
                this.fromGIDField = value;
            }
        }
        
        /// <remarks/>
        public bool NotBlackList {
            get {
                return this.notBlackListField;
            }
            set {
                this.notBlackListField = value;
            }
        }
        
        /// <remarks/>
        public bool NotifySMS {
            get {
                return this.notifySMSField;
            }
            set {
                this.notifySMSField = value;
            }
        }
        
        /// <remarks/>
        public string MobileNumberNotify {
            get {
                return this.mobileNumberNotifyField;
            }
            set {
                this.mobileNumberNotifyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class BulkGridList : BulksBL {
        
        private string branchNameField;
        
        private string numberField;
        
        /// <remarks/>
        public string BranchName {
            get {
                return this.branchNameField;
            }
            set {
                this.branchNameField = value;
            }
        }
        
        /// <remarks/>
        public string Number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class MsgReceptions {
        
        private string recNumberField;
        
        private string sendDateField;
        
        private string recStatusField;
        
        private string deliveryStatusField;
        
        private string recIDField;
        
        /// <remarks/>
        public string RecNumber {
            get {
                return this.recNumberField;
            }
            set {
                this.recNumberField = value;
            }
        }
        
        /// <remarks/>
        public string SendDate {
            get {
                return this.sendDateField;
            }
            set {
                this.sendDateField = value;
            }
        }
        
        /// <remarks/>
        public string RecStatus {
            get {
                return this.recStatusField;
            }
            set {
                this.recStatusField = value;
            }
        }
        
        /// <remarks/>
        public string DeliveryStatus {
            get {
                return this.deliveryStatusField;
            }
            set {
                this.deliveryStatusField = value;
            }
        }
        
        /// <remarks/>
        public string RecID {
            get {
                return this.recIDField;
            }
            set {
                this.recIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class BulkReceptions {
        
        private string recNumberField;
        
        private string sendDateField;
        
        private string recStatusField;
        
        private string deliveryStatusField;
        
        private string opIDField;
        
        private string bulkIDField;
        
        private string recIDField;
        
        /// <remarks/>
        public string RecNumber {
            get {
                return this.recNumberField;
            }
            set {
                this.recNumberField = value;
            }
        }
        
        /// <remarks/>
        public string SendDate {
            get {
                return this.sendDateField;
            }
            set {
                this.sendDateField = value;
            }
        }
        
        /// <remarks/>
        public string RecStatus {
            get {
                return this.recStatusField;
            }
            set {
                this.recStatusField = value;
            }
        }
        
        /// <remarks/>
        public string DeliveryStatus {
            get {
                return this.deliveryStatusField;
            }
            set {
                this.deliveryStatusField = value;
            }
        }
        
        /// <remarks/>
        public string OpID {
            get {
                return this.opIDField;
            }
            set {
                this.opIDField = value;
            }
        }
        
        /// <remarks/>
        public string BulkID {
            get {
                return this.bulkIDField;
            }
            set {
                this.bulkIDField = value;
            }
        }
        
        /// <remarks/>
        public string RecID {
            get {
                return this.recIDField;
            }
            set {
                this.recIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetBranchsCompletedEventHandler(object sender, GetBranchsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBranchsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBranchsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Branchs[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Branchs[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AddBranchCompletedEventHandler(object sender, AddBranchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddBranchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddBranchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AddNumberCompletedEventHandler(object sender, AddNumberCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddNumberCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddNumberCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RemoveBranchCompletedEventHandler(object sender, RemoveBranchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveBranchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveBranchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetBulkCountCompletedEventHandler(object sender, GetBulkCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBulkCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBulkCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AddBulkCompletedEventHandler(object sender, AddBulkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddBulkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddBulkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AddBulk2CompletedEventHandler(object sender, AddBulk2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddBulk2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddBulk2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AddNewBulkCompletedEventHandler(object sender, AddNewBulkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddNewBulkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddNewBulkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetBulkReceptionsCompletedEventHandler(object sender, GetBulkReceptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBulkReceptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBulkReceptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BulkReceptions[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BulkReceptions[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UpdateBulkDeliveryCompletedEventHandler(object sender, UpdateBulkDeliveryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateBulkDeliveryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateBulkDeliveryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMessagesReceptionsCompletedEventHandler(object sender, GetMessagesReceptionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMessagesReceptionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMessagesReceptionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MsgReceptions[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MsgReceptions[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RemoveBulkCompletedEventHandler(object sender, RemoveBulkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveBulkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveBulkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetBulkStatusCompletedEventHandler(object sender, GetBulkStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBulkStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBulkStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int sent {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int failed {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public byte status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetTotalSentCompletedEventHandler(object sender, GetTotalSentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTotalSentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTotalSentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetTodaySentCompletedEventHandler(object sender, GetTodaySentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTodaySentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTodaySentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendMultipleSMSCompletedEventHandler(object sender, SendMultipleSMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMultipleSMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMultipleSMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long[] recId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public byte[] status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SendMultipleSMS2CompletedEventHandler(object sender, SendMultipleSMS2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMultipleSMS2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMultipleSMS2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public long[] recId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public byte[] status {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetBulkCompletedEventHandler(object sender, GetBulkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBulkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBulkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BulkGridList[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BulkGridList[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetSendBulkCompletedEventHandler(object sender, GetSendBulkCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSendBulkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSendBulkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public BulkGridList[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((BulkGridList[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMobileCountCompletedEventHandler(object sender, GetMobileCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMobileCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMobileCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591